{"version":3,"file":"static/js/810.ee6a85e8.chunk.js","mappings":"sSAGaA,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,CAAH,4CAITC,GAAcD,EAAAA,EAAAA,IAAO,MAAPA,CAAH,gDAIXE,GAASF,EAAAA,EAAAA,IAAO,MAAPA,CAAH,8DAKNG,GAAaH,EAAAA,EAAAA,IAAO,MAAPA,CAAH,kFAMVI,GAAKJ,EAAAA,EAAAA,IAAO,KAAPA,CAAH,uEASFK,IAJKL,EAAAA,EAAAA,IAAO,KAAPA,CAAH,4CAIWA,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,wI,2BCvBjBO,EAAU,mCACVC,EAAW,sCAsFjB,EApFqB,WAAO,IAAD,IACfC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,SAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAsBxD,OArBAC,QAAQC,IAAIP,IAEZQ,EAAAA,EAAAA,YAAU,WAAM,wCACZ,6FAEIX,GAAa,GAFjB,SAIcY,EAJd,UAIuBjB,GAJvB,OAIkCC,EAJlC,oBAIqDF,GAJrD,SAK+BmB,EAAAA,EAAAA,IAAUD,GALzC,OAKcE,EALd,OAMQL,QAAQC,IAAII,GACZZ,EAAaY,EAASC,MAP9B,kDAUQN,QAAQC,IAAR,MAVR,yBAYQV,GAAa,GAZrB,8EADY,uBAAC,WAAD,wBAgBZgB,EACH,GAAC,CAACpB,KAEI,4BACP,UAACJ,EAAD,CAAYyB,GAAMZ,EAAiBa,QAAnC,WAA6C,SAAC,MAAD,IAA7C,eACA,0BAAMjB,EAAUkB,eAAhB,UAA6DC,IAA3BnB,EAAUoB,aAA6B,UAAYpB,EAAUoB,aAAaC,MAAM,EAAG,GAArH,QAEA,UAACpC,EAAD,YACQ,SAACG,EAAD,CAAQkC,IAAK,kCAAkCtB,EAAUuB,YACzDC,IAAKxB,EAAUkB,kBACnB,UAAC/B,EAAD,YACI,yCAA0C,GAAzBa,EAAUyB,cAAmBC,QAAQ,GAAtD,SACA,wCACA,uBAAI1B,EAAU2B,YACd,qCACA,SAACtC,EAAD,UACMW,EAAU4B,QAAU5B,EAAU4B,OAAOC,KAAI,SAAAC,GAC3C,OACI,SAACxC,EAAD,WACI,wBAAMwC,EAAMC,QADPD,EAAME,GAIlB,YAMZlC,IAAY,SAAC,KAAD,CACLmC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,cAG7D,UAACjD,EAAD,YACI,yBACI,UAACC,EAAD,CAAYyB,GAAG,OAAf,WAAsB,SAAC,MAAD,IAAtB,cAEJ,yBACI,UAACzB,EAAD,CAAYyB,GAAG,UAAf,WAAyB,SAAC,MAAD,IAAzB,iBAEJ,SAAC,EAAAwB,SAAD,CAAUC,UAAU,SAAC,KAAD,CAChBR,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,aAPzD,UASI,SAAC,KAAD,WAIX,C","sources":["components/Movie.styled.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieCard = styled('div')`\n    display: flex;\n`;\n\nexport const Description = styled('div')`\n    margin-left: 20px;\n`;\n\nexport const Poster = styled('img')`\n    width: 340px;\n    height: auto;\n`;\n\nexport const ListGenres = styled('div')`\n    display: flex;\n    gap: 30px;\n    font-size: 16px;\n`;\n\nexport const Ul = styled('ul')`\n    list-style-type: none;\n    padding: 0px;\n`;\n\nexport const Li = styled('li')`\n    margin: 10px;\n`;\n\nexport const StyledLink = styled(Link)`\n  padding-left: 10px;\n  padding-right: 10px;\n  text-decoration: none;\n  font-size: 20px;\n  color: black; \n`;","import { Suspense,useEffect, useState, useRef } from \"react\";\nimport { Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { SlActionUndo } from \"react-icons/sl\";\nimport { GoFile } from \"react-icons/go\";\nimport { MovieCard, Description, Poster, ListGenres, Ul, StyledLink } from \"components/Movie.styled\";\n\nimport axios from 'axios';\nimport { ColorRing } from  'react-loader-spinner'\nconst API_KEY = '28b9dff9541e6a7c7078bb12d751dcf6';\nconst BASE_URL = 'https://api.themoviedb.org/3/movie/';\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const [isLoading, setIsLoading] = useState('false');\n    const [movieItem, setMovieItem] = useState([]);\n    const location = useLocation();\n    const backLinkLocation = useRef(location.state?.from ?? \"/\");\n    console.log(location);\n\n    useEffect(() => {\n        async function fetchData(){\n            \n            setIsLoading(true);\n            try {\n                const url = `${BASE_URL}${movieId}?api_key=${API_KEY}`;\n                const response = await axios.get(url);\n                console.log(response);\n                setMovieItem(response.data);\n            } catch(error) {\n                //setError(error)\n                console.log (error)\n            } finally {\n                setIsLoading(false); \n            }\n        };\n        fetchData()\n    },[movieId]);\n\n    return <div>\n    <StyledLink to = {backLinkLocation.current} ><SlActionUndo/> Go back</StyledLink>\n    <h2>{ movieItem.original_title} ({movieItem.release_date === undefined ? 'no date' : movieItem.release_date.slice(0, 4)})</h2>\n\n    <MovieCard>\n            <Poster src={'https://image.tmdb.org/t/p/w500'+movieItem.poster_path} \n            alt={movieItem.original_title} /> \n        <Description>\n            <p>User Score: {(movieItem.vote_average * 10).toFixed(1)}% </p>\n            <h3>Overview: </h3>\n            <p>{movieItem.overview}</p>\n            <h3>Genres:</h3>\n            <ListGenres>\n                { movieItem.genres && movieItem.genres.map(genre => {\n                return (               \n                    <Ul key={genre.id}>\n                        <li >{genre.name}</li>\n                    </Ul>  \n                    )\n                })} \n            </ListGenres>\n             \n        </Description>\n        \n    </MovieCard>\n    {isLoading &&<ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n        />}\n        \n    <Ul>\n        <li>\n            <StyledLink to=\"cast\"><GoFile /> Cast</StyledLink>\n        </li>\n        <li>\n            <StyledLink to=\"reviews\"><GoFile /> Reviews</StyledLink>\n        </li>\n        <Suspense fallback={<ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n        />}>\n            <Outlet />\n        </Suspense>\n    </Ul>\n    </div>\n};\n\nexport default MovieDetails;"],"names":["MovieCard","styled","Description","Poster","ListGenres","Ul","StyledLink","Link","API_KEY","BASE_URL","movieId","useParams","useState","isLoading","setIsLoading","movieItem","setMovieItem","location","useLocation","backLinkLocation","useRef","state","from","console","log","useEffect","url","axios","response","data","fetchData","to","current","original_title","undefined","release_date","slice","src","poster_path","alt","vote_average","toFixed","overview","genres","map","genre","name","id","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","Suspense","fallback"],"sourceRoot":""}